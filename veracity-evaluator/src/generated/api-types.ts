/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/evaluation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all evaluations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Evaluation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evaluation/{exchangeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exchangeId: string;
            };
            cookie?: never;
        };
        /** Get evaluation by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Evaluation"];
                    };
                };
            };
        };
        /** Start evaluation with given ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        vla: components["schemas"]["VLA"];
                    };
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Evaluation"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evaluation/{exchangeId}/evaluate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exchangeId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Evaluate data */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        resourceId: string;
                        data: Record<string, never>[];
                    };
                };
            };
            responses: {
                /** @description Evaluation successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/evaluation/{exchangeId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exchangeId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Abort or finish evaluation */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        status: components["schemas"]["EvaluationStatus"];
                    };
                };
            };
            responses: {
                /** @description Status updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/proof": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all proofs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Proof"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proof/{exchangeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exchangeId: string;
            };
            cookie?: never;
        };
        /** Get proof by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Proof"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        EvaluationStatus: "STARTED" | "ABORTED" | "FINISHED";
        /** @enum {string} */
        DataType: "JSON" | "TABULAR";
        /** @enum {string} */
        Aspect: "syntax" | "time_range" | "sequential" | "amount";
        Objective: {
            description: string;
            aspect: components["schemas"]["Aspect"];
            evaluation?: Record<string, never>;
        };
        /** @example {
         *       "meta": {
         *         "description": "A description of the dataset",
         *         "provider": "A provider",
         *         "consumer": "A consumer",
         *         "dataType": "JSON",
         *         "status": "SINGED",
         *         "timestamp": "2022-03-01T00:00:00.000Z"
         *       },
         *       "objectives": [
         *         {
         *           "description": "A description of the objective",
         *           "aspect": "amount",
         *           "evaluation": {
         *             "min": 20,
         *             "max": 30
         *           }
         *         }
         *       ]
         *     } */
        VLA: {
            meta: {
                description?: string;
                provider: string;
                consumer: string;
                dataType: components["schemas"]["DataType"];
                status?: string;
                /** Format: date-time */
                timestamp?: string;
            };
            objectives: components["schemas"]["Objective"][];
        };
        AspectResult: {
            value?: Record<string, never>;
            valid?: boolean | null;
        };
        EvaluationResult: {
            aspect?: components["schemas"]["Aspect"];
            result?: components["schemas"]["AspectResult"];
        }[];
        Evaluation: {
            exchangeId: string;
            status: components["schemas"]["EvaluationStatus"];
            vla: components["schemas"]["VLA"];
            result: components["schemas"]["EvaluationResult"];
        };
        HashedResult: {
            participant: string;
            resultHash: string;
        };
        Proof: {
            exchangeId: string;
            results: components["schemas"]["HashedResult"][];
            match: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
